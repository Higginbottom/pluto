#!/usr/bin/env python 

import subprocess,sys
import glob
from astropy.io import ascii
from astropy.table import Table
import pyPLUTO as pp
import numpy as np


ifile=int(sys.argv[1])


D=pp.pload(ifile)

# We need the definitions file - so we know the conversion factors.

inp=open('definitions.h','ro')
for line in inp.readlines():
	data=line.split()
	if len(data)>1:
		if data[1]=='UNIT_DENSITY':
			UNIT_DENSITY=float(data[2])
		elif data[1]=='UNIT_LENGTH':
			UNIT_LENGTH=float(data[2])
		elif data[1]=='UNIT_VELOCITY':
			UNIT_VELOCITY=float(data[2])

# Open an output file 

fname="%08d"%ifile+".pluto"

# Preamble

out=open(fname,'w')
out.write("# This is a file generated by hydro_to_python\n")
out.write("# We can put any number of comments in behind # signs\n")
out.write("# By default, the order of coordinates are \n")
out.write("#				r, theta phi for spherical polars\n")
out.write("# 		                x,y,z        for carteisan\n")
out.write("#                         or w, z, phi    for cylindrical\n")


titles=[]
titles=titles+["ir","r_cent","r_edge"]
titles=titles+["itheta","theta_cent","theta_edge"]
titles=titles+["v_r","v_theta","v_phi","density","temperature"]

r_edge=[]
r_ratio=(D.x1[2]-D.x1[1])/(D.x1[1]-D.x1[0])
dr=(D.x1[1]-D.x1[0])/(0.5*(1.0+r_ratio))
r_edge.append(D.x1[0]-0.5*dr)
for i in range(len(D.x1)-1):
	r_edge.append(r_edge[-1]+dr)
	dr=dr*r_ratio


r_edge=np.array(r_edge)	

theta_edge=[]
theta_ratio=(D.x2[2]-D.x2[1])/(D.x2[1]-D.x2[0])
dtheta=(D.x2[1]-D.x2[0])/(0.5*(1.0+theta_ratio))
theta_min=D.x2[0]-0.5*dtheta
if theta_min<0.0:
	theta_min=0.0
	theta_edge.append(theta_min)
for i in range(len(D.x2)-1):
	theta_edge.append(theta_edge[-1]+dtheta)
	dtheta=dtheta*theta_ratio
if (theta_edge[-1]+(D.x2[-1]-theta_edge[-1])*2.0)>(np.pi/2.0):
	D.x2[-1]=(theta_edge[-1]+(np.pi/2.0))/2.0

theta_edge=np.array(theta_edge)	

col0=np.array([])
col1=np.array([])
col2=np.array([])
col3=np.array([])
col4=np.array([])
col5=np.array([])
col6=np.array([])
col7=np.array([])
col8=np.array([])
col9=np.array([])
col10=np.array([])

fmt='%013.6e'

#This next line defines formats for the output variables. This is set in a dictionary
fmts={	'ir':'%03i',	
	'r_cent':fmt,
	'r_edge':fmt,
	'itheta':'%i',	
	'theta_cent':fmt,
	'theta_edge':fmt,
	'v_r':fmt,
	'v_theta':fmt,
	'v_phi':fmt,
	'density':fmt,
	'temperature':fmt}

for j in range(len(D.x2)):
	col0=np.append(col0,np.arange(len(D.x1)))
	col1=np.append(col1,D.x1*UNIT_LENGTH)
	col2=np.append(col2,r_edge*UNIT_LENGTH)
	col3=np.append(col3,np.ones(len(D.x1))*j)
	col4=np.append(col4,np.ones(len(D.x1))*D.x2[j])
	col5=np.append(col5,np.ones(len(D.x1))*theta_edge[j])
	col6=np.append(col6,np.transpose(D.vx1)[j]*UNIT_VELOCITY)
	col7=np.append(col7,np.transpose(D.vx2)[j]*UNIT_VELOCITY)
	col8=np.append(col8,np.transpose(D.vx3)[j]*UNIT_VELOCITY)
	col9=np.append(col9,np.transpose(D.rho)[j]*UNIT_DENSITY)
	col10=np.append(col10,np.transpose(D.T)[j])

out_dat=Table([col0,col1,col2,col3,col4,col5,col6,col7,col8,col9,col10],names=titles)
ascii.write(out_dat,out,formats=fmts)
out.close()
