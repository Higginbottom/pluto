#!/usr/bin/env python 

import subprocess
import glob
from astropy.io import ascii
from astropy.table import Table
import pyPLUTO as pp
import numpy as np




def pluto2py(ifile):

	D=pp.pload(ifile)

	# We need the definitions file - so we know the conversion factors.

	inp=open('definitions.h','ro')
	for line in inp.readlines():
		data=line.split()
		if len(data)>1:
			if data[1]=='UNIT_DENSITY':
				UNIT_DENSITY=float(data[2])
			elif data[1]=='UNIT_LENGTH':
				UNIT_LENGTH=float(data[2])
			elif data[1]=='UNIT_VELOCITY':
				UNIT_VELOCITY=float(data[2])

	# Open an output file 

	fname="%08d"%ifile+".pluto"

	# Preamble

	out=open(fname,'w')
	out.write("# This is a file generated by hydro_to_python\n")
	out.write("# We can put any number of comments in behind # signs\n")
	out.write("# By default, the order of coordinates are \n")
	out.write("#				r, theta phi for spherical polars\n")
	out.write("# 		                x,y,z        for carteisan\n")
	out.write("#                         or w, z, phi    for cylindrical\n")


	titles=[]
	titles=titles+["ir","r_cent","r_edge"]
	titles=titles+["itheta","theta_cent","theta_edge"]
	titles=titles+["v_r","v_theta","v_phi","density","temperature"]

	r_edge=[]
	r_ratio=(D.x1[2]-D.x1[1])/(D.x1[1]-D.x1[0])
	dr=(D.x1[1]-D.x1[0])/(0.5*(1.0+r_ratio))
	r_edge.append(D.x1[0]-0.5*dr)
	for i in range(len(D.x1)-1):
		r_edge.append(r_edge[-1]+dr)
		dr=dr*r_ratio
	
	
	r_edge=np.array(r_edge)	

	theta_edge=[]
	theta_ratio=(D.x2[2]-D.x2[1])/(D.x2[1]-D.x2[0])
	dtheta=(D.x2[1]-D.x2[0])/(0.5*(1.0+theta_ratio))
	theta_min=D.x2[0]-0.5*dtheta
	if theta_min<0.0:
		theta_min=0.0
		theta_edge.append(theta_min)
	for i in range(len(D.x2)-1):
		theta_edge.append(theta_edge[-1]+dtheta)
		dtheta=dtheta*theta_ratio
	if (theta_edge[-1]+(D.x2[-1]-theta_edge[-1])*2.0)>(np.pi/2.0):
		D.x2[-1]=(theta_edge[-1]+(np.pi/2.0))/2.0

	theta_edge=np.array(theta_edge)	

	col0=np.array([])
	col1=np.array([])
	col2=np.array([])
	col3=np.array([])
	col4=np.array([])
	col5=np.array([])
	col6=np.array([])
	col7=np.array([])
	col8=np.array([])
	col9=np.array([])
	col10=np.array([])

	fmt='%013.6e'

	#This next line defines formats for the output variables. This is set in a dictionary
	fmts={	'ir':'%03i',	
		'r_cent':fmt,
		'r_edge':fmt,
		'itheta':'%i',	
		'theta_cent':fmt,
		'theta_edge':fmt,
		'v_r':fmt,
		'v_theta':fmt,
		'v_phi':fmt,
		'density':fmt,
		'temperature':fmt}

	for j in range(len(D.x2)):
		col0=np.append(col0,np.arange(len(D.x1)))
		col1=np.append(col1,D.x1*UNIT_LENGTH)
		col2=np.append(col2,r_edge*UNIT_LENGTH)
		col3=np.append(col3,np.ones(len(D.x1))*j)
		col4=np.append(col4,np.ones(len(D.x1))*D.x2[j])
		col5=np.append(col5,np.ones(len(D.x1))*theta_edge[j])
		col6=np.append(col6,np.transpose(D.vx1)[j]*UNIT_VELOCITY)
		col7=np.append(col7,np.transpose(D.vx2)[j]*UNIT_VELOCITY)
		col8=np.append(col8,np.transpose(D.vx3)[j]*UNIT_VELOCITY)
		col9=np.append(col9,np.transpose(D.rho)[j]*UNIT_DENSITY)
		col10=np.append(col10,np.transpose(D.T)[j])

	out_dat=Table([col0,col1,col2,col3,col4,col5,col6,col7,col8,col9,col10],names=titles)
	ascii.write(out_dat,out,formats=fmts)
	out.close()
	return


def pre_calc(ifile):
	max_change=0.9
	heatcool=ascii.read("py_heatcool.dat")
	D=pp.pload(ifile)

	# We need the definitions file - so we know the conversion factors.

	inp=open('definitions.h','ro')
	for line in inp.readlines():
		data=line.split()
		if len(data)>1:
			if data[1]=='UNIT_DENSITY':
				UNIT_DENSITY=float(data[2])
			elif data[1]=='UNIT_LENGTH':
				UNIT_LENGTH=float(data[2])
			elif data[1]=='UNIT_VELOCITY':
				UNIT_VELOCITY=float(data[2])

	comp_h_pre=[]
	comp_c_pre=[]
	xray_h_pre=[]
	brem_c_pre=[]
	line_c_pre=[]

	odd=0.0

	for i in range(len(heatcool["rho"])):
		if (heatcool["rho"][i]/(D.rho[heatcool["i"][i]][heatcool["j"][i]]*UNIT_DENSITY))-1.>1e-6:
			odd=odd+1
		nenh=D.ne[heatcool["i"][i]][heatcool["j"][i]]*D.nh[heatcool["i"][i]][heatcool["j"][i]]
		test=(heatcool["heat_comp"][i]/(D.comp_h_pre[heatcool["i"][i]][heatcool["j"][i]]*D.comp_h[heatcool["i"][i]][heatcool["j"][i]]*nenh))
		if test<max_change*D.comp_h_pre[heatcool["i"][i]][heatcool["j"][i]]:
			test=max_change*D.comp_h_pre[heatcool["i"][i]][heatcool["j"][i]]
		elif test>(1./max_change)*D.comp_h_pre[heatcool["i"][i]][heatcool["j"][i]]:
			test=(1./max_change)*D.comp_h_pre[heatcool["i"][i]][heatcool["j"][i]]
		comp_h_pre.append(test)
			
		test=(heatcool["cool_comp"][i]/(D.comp_c_pre[heatcool["i"][i]][heatcool["j"][i]]*D.comp_c[heatcool["i"][i]][heatcool["j"][i]]*nenh))
		if test<max_change*D.comp_c_pre[heatcool["i"][i]][heatcool["j"][i]]:
			test=max_change*D.comp_c_pre[heatcool["i"][i]][heatcool["j"][i]]
		elif test>(1./max_change)*D.comp_c_pre[heatcool["i"][i]][heatcool["j"][i]]:
			test=(1./max_change)*D.comp_c_pre[heatcool["i"][i]][heatcool["j"][i]]
		comp_c_pre.append(test)	
	
		test=(heatcool["cool_lines"][i]/(D.line_c_pre[heatcool["i"][i]][heatcool["j"][i]]*D.line_c[heatcool["i"][i]][heatcool["j"][i]]*nenh))
		if test<max_change*D.line_c_pre[heatcool["i"][i]][heatcool["j"][i]]:
			test=max_change*D.line_c_pre[heatcool["i"][i]][heatcool["j"][i]]
		elif test>(1./max_change)*D.line_c_pre[heatcool["i"][i]][heatcool["j"][i]]:
			test=(1./max_change)*D.line_c_pre[heatcool["i"][i]][heatcool["j"][i]]
		line_c_pre.append(test)	
	
		test=(heatcool["cool_ff"][i]/(D.brem_c_pre[heatcool["i"][i]][heatcool["j"][i]]*D.brem_c[heatcool["i"][i]][heatcool["j"][i]]*nenh))
		if test<max_change*D.brem_c_pre[heatcool["i"][i]][heatcool["j"][i]]:
			test=max_change*D.brem_c_pre[heatcool["i"][i]][heatcool["j"][i]]
		elif test>(1./max_change)*D.brem_c_pre[heatcool["i"][i]][heatcool["j"][i]]:
			test=(1./max_change)*D.brem_c_pre[heatcool["i"][i]][heatcool["j"][i]]
		brem_c_pre.append(test)	
	
		test=(heatcool["heat_xray"][i]/(D.xray_h_pre[heatcool["i"][i]][heatcool["j"][i]]*D.xray_h[heatcool["i"][i]][heatcool["j"][i]]*nenh))
		if test<max_change*D.xray_h_pre[heatcool["i"][i]][heatcool["j"][i]]:
			test=max_change*D.xray_h_pre[heatcool["i"][i]][heatcool["j"][i]]
		elif test>(1./max_change)*D.xray_h_pre[heatcool["i"][i]][heatcool["j"][i]]:
			test=(1./max_change)*D.xray_h_pre[heatcool["i"][i]][heatcool["j"][i]]
		xray_h_pre.append(test)
	
	
	fmt='%013.6e'

	#This next line defines formats for the output variables. This is set in a dictionary
	fmts={	'ir':'%03i',	
		'itheta':'%03i',	
		'rho':fmt,
		'comp_h_pre':fmt,
		'comp_c_pre':fmt,
		'xray_h_pre':fmt,
		'line_c_pre':fmt,
		'brem_c_pre':fmt,
		}	

	titles=[]
	titles=titles+["ir","itheta","rho"]
	titles=titles+["comp_h_pre","comp_c_pre","xray_h_pre","brem_c_pre","line_c_pre"]	
	
	col0=heatcool["i"]
	col1=heatcool["j"]
	col2=heatcool["rho"]
	col3=comp_h_pre
	col4=comp_c_pre
	col5=xray_h_pre
	col6=brem_c_pre
	col7=line_c_pre

	out=open("prefactors.dat",'w')

	out_dat=Table([col0,col1,col2,col3,col4,col5,col6,col7],names=titles)
	ascii.write(out_dat,out,formats=fmts)
	return(odd)



def python_input_file(fname,cycles=2):
	output=open(fname+".pf",'w')
	output.write("System_type(0=star,1=binary,2=agn)                    2\n")
	output.write("Wind_type                 3\n")	
	output.write("Coord.system(0=spherical,1=cylindrical,2=spherical_polar,3=cyl_var)                    1\n")
	output.write("Wind.dim.in.x_or_r.direction                     30\n")
	output.write("Wind.dim.in.z_or_theta.direction                   30\n")
	output.write("Number.of.wind.components 1\n") 
	output.write("disk.type(0=no.disk,1=standard.flat.disk,2=vertically.extended.disk) 0\n") 
	output.write("Atomic_data                         data/standard80\n")
	output.write("write_atomicdata(0=no,1=yes)               0\n")        
	output.write("photons_per_cycle                            10000000\n")
	output.write("Ionization_cycles                                "+str(cycles)+"\n")
	output.write("spectrum_cycles                                   0\n")
	output.write("adjust_grid(0=no,1=yes)								0\n")
	output.write("Wind_ionization 9\n")
	output.write("Line_transfer 3\n")
	output.write("Thermal_balance_options(0=everything.on,1=no.adiabatic)                    1\n")
	output.write("Disk_radiation(y=1)                               0\n")
	output.write("Wind_radiation(y=1)                               1\n")
	output.write("QSO_BH_radiation                               1\n")
	output.write("Rad_type_for_disk(0=bb,1=models)_to_make_wind     0\n")
	output.write("Rad_type_for_agn(0=bb,1=models,3=power_law,4=cloudy_table)_to_make_wind)  5\n")
	output.write("mstar(msol)                                     7\n")
	output.write("rstar(cm)                                     7e+08\n")
	output.write("tstar                                         40000\n")
	output.write("lum_agn(ergs/s) 1.7698e37\n")
	output.write("agn_bremsstrahlung_temp(K) 5.6e7\n")
	output.write("agn_bremsstrahlung_alpha 0.0\n")
	output.write("geometry_for_pl_source 0\n")
	output.write("agn_power_law_index 							0.0\n")
	output.write("agn_power_law_cutoff (0)						0\n")
	output.write("Torus(0=no,1=yes)								0\n")
	output.write("disk.mdot(msol/yr)                            1e-08\n")
	output.write("Disk.illumination.treatment 0\n")
	output.write("Disk.temperature.profile(0=standard;1=readin)                    0\n")
	output.write("disk.radmax(cm)                             2.4e+10\n")
	output.write("wind.radmax(cm)                               1e+11\n")
	output.write("wind.t.init                                   40000\n")
	output.write("hydro_file "+fname+"\n")
	output.write("Hydro_thetamax(degrees)                        -1\n")
	output.write("filling_factor(1=smooth,<1=clumped)                    1\n")
	output.write("Rad_type_for_agn(3=power_law,4=cloudy_table)_in_final_spectrum 3\n")
	output.write("Rad_type_for_disk(0=bb,1=models,2=uniform)_in_final_spectrum                    0\n")
	output.write("spectrum_wavemin                               1450\n")
	output.write("spectrum_wavemax                               1650\n")
	output.write("no_observers                                      4\n")
	output.write("angle(0=pole)                                    10\n")
	output.write("angle(0=pole)                                    30\n")
	output.write("angle(0=pole)                                    60\n")
	output.write("angle(0=pole)                                    80\n")
	output.write("live.or.die(0).or.extract(anything_else)                    1\n")
	output.write("spec.type(flambda(1),fnu(2),basic(other)                    1\n")
	output.write("Use.standard.care.factors(1=yes)						1\n")
	output.write("reverb.type 0\n")
	output.write("Photon.sampling.approach           8\n")
	output.write("Num.of.frequency.bands(5) 10\n")
	output.write("Lowest_energy_to_be_considered(eV) 1.03333\n")
	output.write("Highest_energy_to_be_considered(eV) 50000 \n")
	output.write("Extra.diagnostics(0=no,1=yes)   1\n")
	output.write("keep_ioncycle_windsaves()   1\n")
	output.close()
	return

def pluto_input_file(tlim):
	output=open('pluto.ini','w')
	output.write("[Grid]\n")
	output.write("\n")
	output.write("X1-grid    1    0.5   80    r    20. 1.02\n")
	output.write("X2-grid    1    0.0    100    r    1.5707963267948966. 0.95\n")
	output.write("X3-grid    1    0.0    1      u    1.0\n")
	output.write("\n")
	output.write("[Chombo Refinement]\n")
	output.write("\n")
	output.write("Levels           4\n")
	output.write("Ref_ratio        2 2 2 2 2\n") 
	output.write("Regrid_interval  2 2 2 2 \n")
	output.write("Refine_thresh    0.3\n")
	output.write("Tag_buffer_size  3\n")
	output.write("Block_factor     8\n")
	output.write("Max_grid_size    64\n")
	output.write("Fill_ratio       0.75\n")
	output.write("\n")
	output.write("[Time]\n")
	output.write("\n")
	output.write("CFL              0.4\n")
	output.write("CFL_max_var      1.1\n")
	output.write("tstop            "+str(tlim)+"\n")
	output.write("first_dt         1e-4\n")
	output.write("\n")
	output.write("[Solver]\n")
	output.write("\n")
	output.write("Solver         tvdlf\n")
	output.write("\n")
	output.write("[Boundary]\n")
	output.write("\n")
	output.write("X1-beg        outflow\n")
	output.write("X1-end        outflow\n")
	output.write("X2-beg        axisymmetric\n")
	output.write("X2-end        reflective\n")
	output.write("X3-beg        outflow\n")
	output.write("X3-end        outflow\n")
	output.write("\n")
	output.write("[Static Grid Output]\n")
	output.write("\n")
	output.write("uservar    14    XI T comp_h comp_c line_c brem_c xray_h comp_h_pre comp_c_pre line_c_pre brem_c_pre xray_h_pre ne nh\n")
	output.write("dbl        1000000000000   -1   single_file\n")
	output.write("flt       -1.0  -1   single_file\n")
	output.write("vtk       -1.0  -1   single_file\n")
	output.write("dbl.h5    -1.0  -1\n")
	output.write("flt.h5    -1.0  -1\n")
	output.write("tab       -1.0  -1   \n")
	output.write("ppm       -1.0  -1   \n")
	output.write("png       -1.0  -1\n")
	output.write("log        1000\n")
	output.write("analysis  -1.0  -1\n")
	output.write("\n")
	output.write("[Chombo HDF5 output]\n")
	output.write("\n")
	output.write("Checkpoint_interval  -1.0  0\n")
	output.write("Plot_interval         1.0  0 \n")
	output.write("\n")
	output.write("[Parameters]\n")
	output.write("\n")
	output.write("RHO_0                       2.75e-12  \n")
	output.write("RHO_ALPHA                   2.0  \n")
	output.write("R_0                         4.82e11  \n")
	output.write("CENT_MASS                   13.9e33  \n")
	output.write("DISK_MDOT                   4.4e17  \n")
	output.write("CISO                        1e10  \n")
	output.write("L_x                         3.3e37  \n")
	output.write("T_x                         5.6e7  \n")
	output.write("DISK_TRUNC_RAD              9.64e11\n")
	output.write("MU                          0.6\n")
	output.close()
	return



	
#subprocess.check_call("touch usr",shell=True)
#subprocess.check_call("rm usr*",shell=True)
#subprocess.check_call("touch res",shell=True)
#subprocess.check_call("rm res*",shell=True)
#subprocess.check_call("touch hdf",shell=True)
#subprocess.check_call("rm hdf*",shell=True)
#subprocess.check_call("touch hst",shell=True)
#subprocess.check_call("rm hst*",shell=True)

#subprocess.check_call("touch py_heatcool.dat",shell=True)
#subprocess.check_call("rm py_heatcool.dat",shell=True)


t0=10000.0  #The run time for the initial zeus run - the first run is to produce a starting geometry
dt=1000.0
den_tol=0.5 #We ask Zeus to log cells whose density has changed by 50% or more (can be a *LOT* more)
nden=0.1    #The percentage of cells that can change before we call python again


python_ver="~/python/bin/py82i"

istart=0

runname='nsh_dw44'

if t0==0.0:
	print "We need to run for at least one second, dummy"
	t0=1.0

py_cycles=3


py_cycles=py_cycles+istart*2


out=open("pluto_py_logfile",'w',0)

out.write("Starting run"+"\n")
#out.write("zeus_ver="+zeus_ver+"\n")

for i in range(istart,10000):  #We will permit up to 500 calls to python (this is a lot)
	out.write("STARTING CYCLE "+str(i)+"\n")
	print ("STARTING CYCLE "+str(i)+"\n")
	
	pluto_input_file(t0+float(i)*dt)
	out.write("Running for time="+str(t0+float(i)*dt)+"\n")
	if i==0:   #This is the first step - 
		out.write("Creating first zeus_file"+"\n")
		cmdline="./pluto >"+"%08d"%i+"_pluto_output"
	else:
		out.write("generating restart zeus run \n")      #This should be the name of the restart file
		cmdline="./pluto -restart "+str(i)+" > "+"%08d"%i+"_pluto_output"
		
	out.write("Executing pluto with command line "+cmdline+"\n")
	subprocess.call(cmdline,shell=True)    #Call zeus
	out.write("Finished pluto run"+"\n")
	pluto2py(i)   #We now make a python input file
	root="%08d"%i
	python_input_file(root+".pluto",py_cycles)  #This generate a python parameter file
	cmdline="cp "+root+".pluto"+".pf input.pf"   #Copy the python file to a generaic name so windsave files persist
	out.write(cmdline+"\n")
	print (cmdline+"\n")

	subprocess.check_call(cmdline,shell=True)
	if py_cycles==3: #This is the first time thruogh - so no restart""
		cmdline="mpirun -n 4 "+python_ver+" -z  input.pf > "+root+".py_log"  #We now run python
	else:
		cmdline="mpirun -n 4 "+python_ver+" -z -r  input.pf > "+root+".py_log"  #We now run python
	out.write("Running python"+"\n") 
	print("Running python"+"\n") 	
	out.write(cmdline+"\n")
	print(cmdline+"\n")
	
	subprocess.check_call(cmdline,shell=True)   #Well, here is the actual call
	cmdline="cp py_heatcool.dat "+root+"_py_heatcool.dat"  
	out.write(cmdline+"\n")
	subprocess.check_call(cmdline,shell=True)   #And finally we take a copy of the python heatcool file for later investigation.
	py_cycles=py_cycles+2
	out.write("FINISHED CYCLE"+"\n")
	
out.close()

